# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nr_registration.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Iterable, List, Optional, Union

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class SubscribeRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Message(betterproto.Message):
    """Registration Service messages."""

    register_cmd: "RegisterCommand" = betterproto.message_field(1, group="msg")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterCommand(betterproto.Message):
    """
    Register command. Upon receiving this command, the client shall
    (re)register all cells in the network with the eSON server using the
    Register RPC.
    """

    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterResponse(betterproto.Message):
    """The error_msg field is omitted if registration is successful."""

    ncgi: int = betterproto.fixed64_field(1)
    error_msg: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnregisterRequest(betterproto.Message):
    ncgi: int = betterproto.fixed64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnregisterResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddNeighborRequest(betterproto.Message):
    ncgi: int = betterproto.fixed64_field(1)
    neighbors: List["__v1__.Neighbor"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddNeighborResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveNeighborRequest(betterproto.Message):
    ncgi: int = betterproto.fixed64_field(1)
    neighbor_ncgis: List[int] = betterproto.fixed64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveNeighborResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


class RegistrationServiceStub(betterproto.ServiceStub):
    async def subscribe(self) -> AsyncIterator["Message"]:
        """Subscribe to the RegistrationService messages."""

        request = SubscribeRequest()

        async for response in self._unary_stream(
            "/com.airhopcomm.eson.nr.registration.v1.RegistrationService/Subscribe",
            request,
            Message,
        ):
            yield response

    async def register(
        self,
        request_iterator: Union[AsyncIterable["__v1__.Cell"], Iterable["__v1__.Cell"]],
    ) -> AsyncIterator["RegisterResponse"]:
        """
        Register cells with eSON. The client shall use this RPC to register a
        new cell with the eSON Server or to update parameters of an existing
        cell.
        """

        async for response in self._stream_stream(
            "/com.airhopcomm.eson.nr.registration.v1.RegistrationService/Register",
            request_iterator,
            __v1__.Cell,
            RegisterResponse,
        ):
            yield response

    async def unregister(self, *, ncgi: int = 0) -> "UnregisterResponse":
        """
        Unregister cells from eSON. The client shall use this RPC when cells
        are decommissioned from the network.
        """

        request = UnregisterRequest()
        request.ncgi = ncgi

        return await self._unary_unary(
            "/com.airhopcomm.eson.nr.registration.v1.RegistrationService/Unregister",
            request,
            UnregisterResponse,
        )

    async def add_neighbor(
        self, *, ncgi: int = 0, neighbors: Optional[List["__v1__.Neighbor"]] = None
    ) -> "AddNeighborResponse":
        """
        Add neighbors to a cell. The client shall use this RPC when new
        neighbors are added to a cell's NRT.
        """

        neighbors = neighbors or []

        request = AddNeighborRequest()
        request.ncgi = ncgi
        if neighbors is not None:
            request.neighbors = neighbors

        return await self._unary_unary(
            "/com.airhopcomm.eson.nr.registration.v1.RegistrationService/AddNeighbor",
            request,
            AddNeighborResponse,
        )

    async def remove_neighbor(
        self, *, ncgi: int = 0, neighbor_ncgis: Optional[List[int]] = None
    ) -> "RemoveNeighborResponse":
        """
        Remove neighbors from a cell. The client shall use this RPC when
        neighbors are removed from a cell's NRT.
        """

        neighbor_ncgis = neighbor_ncgis or []

        request = RemoveNeighborRequest()
        request.ncgi = ncgi
        request.neighbor_ncgis = neighbor_ncgis

        return await self._unary_unary(
            "/com.airhopcomm.eson.nr.registration.v1.RegistrationService/RemoveNeighbor",
            request,
            RemoveNeighborResponse,
        )


from ... import v1 as __v1__
