# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nr_mlb.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, List, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class SubscribeRequest(betterproto.Message):
    # A set of NCGIs. If ncgi_set is empty, it means all NCGIs.
    ncgi_set: List[int] = betterproto.fixed64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportCapacityRequest(betterproto.Message):
    """
    Report a cell's free capacity. Value is between 0 and 100 inclusive. 100
    means cell is 100% free. 0 means cell has 0% free capacity, in other words,
    fully loaded.
    """

    ncgi: int = betterproto.fixed64_field(1)
    capacity_value: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportCapacityResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Message(betterproto.Message):
    """MLB service messages."""

    change_req: "ChangeRequest" = betterproto.message_field(1, group="msg")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ChangeRequest(betterproto.Message):
    """Change neighbor cell specific offsets"""

    ncgi: int = betterproto.fixed64_field(1)
    neighbor_ncgi: int = betterproto.fixed64_field(2)
    cio: Optional[int] = betterproto.message_field(3, wraps=betterproto.TYPE_UINT32)
    q_offset: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfirmChangeRequest(betterproto.Message):
    """Confirm neighbor cell specific offsets have been changed"""

    ncgi: int = betterproto.fixed64_field(1)
    neighbor_ncgi: int = betterproto.fixed64_field(2)
    cio: Optional[int] = betterproto.message_field(3, wraps=betterproto.TYPE_UINT32)
    q_offset: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfirmChangeResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


class MlbServiceStub(betterproto.ServiceStub):
    """
    If there are multiple clients that subscribe to cell specific offsets
    changes, one and only one shall confirm the change.
    """

    async def subscribe(
        self, *, ncgi_set: Optional[List[int]] = None
    ) -> AsyncIterator["Message"]:
        """
        Subscribe to the MlbService for MLB algorithm messages. Any future
        neighbor cell specific offsets change will be streamed back through
        this RPC.
        """

        ncgi_set = ncgi_set or []

        request = SubscribeRequest()
        request.ncgi_set = ncgi_set

        async for response in self._unary_stream(
            "/com.airhopcomm.eson.nr.mlb.v1.MlbService/Subscribe", request, Message,
        ):
            yield response

    async def report_capacity(
        self, *, ncgi: int = 0, capacity_value: int = 0
    ) -> "ReportCapacityResponse":
        """
        Report cell capacity periodically. The recommended period is 10
        seconds.
        """

        request = ReportCapacityRequest()
        request.ncgi = ncgi
        request.capacity_value = capacity_value

        return await self._unary_unary(
            "/com.airhopcomm.eson.nr.mlb.v1.MlbService/ReportCapacity",
            request,
            ReportCapacityResponse,
        )

    async def confirm_change(
        self,
        *,
        ncgi: int = 0,
        neighbor_ncgi: int = 0,
        cio: Optional[int] = None,
        q_offset: Optional[int] = None,
    ) -> "ConfirmChangeResponse":
        """
        Confirm a neighbor cell individual offsets change request has been
        applied. eSON updates internally to reflect the change.
        """

        request = ConfirmChangeRequest()
        request.ncgi = ncgi
        request.neighbor_ncgi = neighbor_ncgi
        if cio is not None:
            request.cio = cio
        if q_offset is not None:
            request.q_offset = q_offset

        return await self._unary_unary(
            "/com.airhopcomm.eson.nr.mlb.v1.MlbService/ConfirmChange",
            request,
            ConfirmChangeResponse,
        )
