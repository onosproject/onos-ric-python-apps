# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nr.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto


class RestrictedSetConfig(betterproto.Enum):
    RESTRICTED_SET_CONFIG_UNKNOWN = 0
    RESTRICTED_SET_CONFIG_UNRESTRICTED = 1
    RESTRICTED_SET_CONFIG_TYPE_A = 2
    RESTRICTED_SET_CONFIG_TYPE_B = 3


class DuplexMode(betterproto.Enum):
    DUPLEX_MODE_UNKNOWN = 0
    DUPLEX_MODE_FDD = 1
    DUPLEX_MODE_TDD = 2


class CellSize(betterproto.Enum):
    CELL_SIZE_UNKNOWN = 0
    CELL_SIZE_FEMTO = 1
    CELL_SIZE_ENTERPRISE = 2
    CELL_SIZE_OUTDOOR_SMALL = 3
    CELL_SIZE_MACRO = 4


@dataclass(eq=False, repr=False)
class Cell(betterproto.Message):
    """
    The Cell message defines attributes of a NR cell that is used by various
    eSON services.  Fields marked with "mandatory*" are required fields for
    first time registration.
    """

    ncgi: int = betterproto.fixed64_field(1)
    cell_size: "CellSize" = betterproto.enum_field(2)
    dl_nrarfcn: Optional[int] = betterproto.message_field(
        3, wraps=betterproto.TYPE_UINT32
    )
    ul_nrarfcn: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    pci: Optional[int] = betterproto.message_field(5, wraps=betterproto.TYPE_UINT32)
    latitude: Optional[float] = betterproto.message_field(
        6, wraps=betterproto.TYPE_FLOAT
    )
    longitude: Optional[float] = betterproto.message_field(
        7, wraps=betterproto.TYPE_FLOAT
    )
    rsi_config: "RsiConfig" = betterproto.message_field(8)
    pci_pool: "PciPool" = betterproto.message_field(100)
    rsi_pool: "RsiPool" = betterproto.message_field(110)
    reserved_rsi_pool: "RsiPool" = betterproto.message_field(111)
    restricted_set_config: "RestrictedSetConfig" = betterproto.enum_field(112)
    zcz_config_index_changeable: Optional[bool] = betterproto.message_field(
        113, wraps=betterproto.TYPE_BOOL
    )
    prach_config_indices: "PrachConfigIndexList" = betterproto.message_field(114)
    capacity_class_value: Optional[int] = betterproto.message_field(
        120, wraps=betterproto.TYPE_UINT32
    )
    cell_specific_offsets: "CellSpecificOffsets" = betterproto.message_field(130)
    event_a3_report_configs: List["EventA3ReportConfig"] = betterproto.message_field(
        143
    )
    neighbors: "NeighborList" = betterproto.message_field(1000)
    vendor_info: Optional[str] = betterproto.message_field(
        2000, wraps=betterproto.TYPE_STRING
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RsiConfig(betterproto.Message):
    """RACH RSI configuration"""

    rsi: int = betterproto.uint32_field(1)
    zcz_config_index: int = betterproto.uint32_field(2)
    prach_config_index: int = betterproto.uint32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrachConfigIndexList(betterproto.Message):
    indices: List[int] = betterproto.uint32_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PciPool(betterproto.Message):
    """
    The PciPool message defines a set of PCI ranges. The PciService will only
    use values in this pool when allocating a new PCI.
    """

    ranges: List["PciRange"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PciRange(betterproto.Message):
    lower_pci: int = betterproto.uint32_field(1)
    upper_pci: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RsiPool(betterproto.Message):
    """
    The RsiPool message defines a set of RSI ranges. The RsiService will only
    use values in this pool when allocating a new RSI.
    """

    ranges: List["RsiRange"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RsiRange(betterproto.Message):
    lower_rsi: int = betterproto.uint32_field(1)
    upper_rsi: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NeighborList(betterproto.Message):
    neighbors: List["Neighbor"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Neighbor(betterproto.Message):
    """
    The Neighbor message defines a NR neighbor cell. It is an entry of the
    cell's neighbor table.
    """

    ncgi: int = betterproto.fixed64_field(1)
    cell_size: "CellSize" = betterproto.enum_field(2)
    dl_nrarfcn: Optional[int] = betterproto.message_field(
        3, wraps=betterproto.TYPE_UINT32
    )
    ul_nrarfcn: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    pci: Optional[int] = betterproto.message_field(5, wraps=betterproto.TYPE_UINT32)
    rsi_config: "RsiConfig" = betterproto.message_field(6)
    cell_specific_offsets: "CellSpecificOffsets" = betterproto.message_field(50)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventA3ReportConfig(betterproto.Message):
    nrarfcn: int = betterproto.uint32_field(1)
    offset: int = betterproto.int32_field(2)
    hysteresis: int = betterproto.uint32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CellSpecificOffsets(betterproto.Message):
    cio: int = betterproto.uint32_field(1)
    offset_freq: int = betterproto.uint32_field(2)
    q_offset: int = betterproto.uint32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
