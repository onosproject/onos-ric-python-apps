# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nr_mlb_pb2 as nr__mlb__pb2


class MlbServiceStub(object):
    """If there are multiple clients that subscribe to cell specific
    offsets changes, one and only one shall confirm the change.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/com.airhopcomm.eson.nr.mlb.v1.MlbService/Subscribe',
                request_serializer=nr__mlb__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=nr__mlb__pb2.Message.FromString,
                )
        self.ReportCapacity = channel.unary_unary(
                '/com.airhopcomm.eson.nr.mlb.v1.MlbService/ReportCapacity',
                request_serializer=nr__mlb__pb2.ReportCapacityRequest.SerializeToString,
                response_deserializer=nr__mlb__pb2.ReportCapacityResponse.FromString,
                )
        self.ConfirmChange = channel.unary_unary(
                '/com.airhopcomm.eson.nr.mlb.v1.MlbService/ConfirmChange',
                request_serializer=nr__mlb__pb2.ConfirmChangeRequest.SerializeToString,
                response_deserializer=nr__mlb__pb2.ConfirmChangeResponse.FromString,
                )


class MlbServiceServicer(object):
    """If there are multiple clients that subscribe to cell specific
    offsets changes, one and only one shall confirm the change.
    """

    def Subscribe(self, request, context):
        """Subscribe to the MlbService for MLB algorithm messages. Any
        future neighbor cell specific offsets change will be streamed
        back through this RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportCapacity(self, request, context):
        """Report cell capacity periodically. The recommended period is 10
        seconds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmChange(self, request, context):
        """Confirm a neighbor cell individual offsets change request has
        been applied. eSON updates internally to reflect the change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MlbServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=nr__mlb__pb2.SubscribeRequest.FromString,
                    response_serializer=nr__mlb__pb2.Message.SerializeToString,
            ),
            'ReportCapacity': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportCapacity,
                    request_deserializer=nr__mlb__pb2.ReportCapacityRequest.FromString,
                    response_serializer=nr__mlb__pb2.ReportCapacityResponse.SerializeToString,
            ),
            'ConfirmChange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmChange,
                    request_deserializer=nr__mlb__pb2.ConfirmChangeRequest.FromString,
                    response_serializer=nr__mlb__pb2.ConfirmChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.airhopcomm.eson.nr.mlb.v1.MlbService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MlbService(object):
    """If there are multiple clients that subscribe to cell specific
    offsets changes, one and only one shall confirm the change.
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.airhopcomm.eson.nr.mlb.v1.MlbService/Subscribe',
            nr__mlb__pb2.SubscribeRequest.SerializeToString,
            nr__mlb__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportCapacity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.airhopcomm.eson.nr.mlb.v1.MlbService/ReportCapacity',
            nr__mlb__pb2.ReportCapacityRequest.SerializeToString,
            nr__mlb__pb2.ReportCapacityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.airhopcomm.eson.nr.mlb.v1.MlbService/ConfirmChange',
            nr__mlb__pb2.ConfirmChangeRequest.SerializeToString,
            nr__mlb__pb2.ConfirmChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
